"use client"; // ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ component ‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà client-side (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà server-side)

import React, { useState } from "react"; // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ React ‡πÅ‡∏•‡∏∞ useState hook
import { FolderOpen, ChevronRight, ChevronDown } from "lucide-react"; // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ icon ‡∏à‡∏≤‡∏Å lucide-react

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÑ‡∏ü‡∏•‡πå
interface FileTreeItem {
  type: string; // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° (file ‡∏´‡∏£‡∏∑‡∏≠ folder)
  name: string; // ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
  parent?: string; // ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  level?: number; // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
}

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î props ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ VSCodeMockup component
interface VSCodeMockupProps {
  initialFileContents?: Record<string, string>; // ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå (key ‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå, value ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤)
  fileTree?: FileTreeItem[]; // ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
  initialFile?: string; // ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î component
  height?: string; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á VSCode mockup
  editorTitle?: string; // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡∏≠‡∏á editor
  onFileSelect?: (filename: string) => void; // function callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
  className?: string; // CSS class ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á VSCodeMockup component
const VSCodeMockup: React.FC<VSCodeMockupProps> = ({
  initialFileContents = {}, // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô object ‡∏ß‡πà‡∏≤‡∏á
  fileTree: initialFileTree, // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ fileTree ‡∏à‡∏≤‡∏Å props
  initialFile = Object.keys(initialFileContents)[0] || "", // ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å‡πÉ‡∏ô initialFileContents ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡πà‡∏≤‡∏á
  height = "100%", // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  editorTitle = "VS Code", // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  onFileSelect, // callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
  className = "", // CSS class ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
}) => {
  const [currentFile, setCurrentFile] = useState<string>(initialFile); // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const [expandedFolders, setExpandedFolders] = useState<
    Record<string, boolean>
  >({
    src: true, // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå src ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    components: true, // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå components ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    pages: true, // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå pages ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  });
  const [fileContents] = useState<Record<string, string>>(initialFileContents); // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå

  // ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î fileTree
  const defaultFileTree: FileTreeItem[] = [
    { type: "folder", name: "src", level: 0 },
    { type: "file", name: "index.js", parent: "src", level: 1 },
    { type: "file", name: "styles.css", parent: "src", level: 1 },
    { type: "folder", name: "components", parent: "src", level: 1 },
    { type: "file", name: "Button.jsx", parent: "components", level: 2 },
    { type: "file", name: "Card.jsx", parent: "components", level: 2 },
    { type: "file", name: "README.md", level: 0 },
    { type: "file", name: "package.json", level: 0 },
  ];

  // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ fileTree ‡∏à‡∏≤‡∏Å props ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
  const fileTree = initialFileTree || defaultFileTree;

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
  const toggleFolder = (folder: string) => {
    setExpandedFolders((prev) => ({
      ...prev, // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ
      [folder]: !prev[folder], // ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å
    }));
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
  const handleFileClick = (filename: string) => {
    setCurrentFile(filename); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    if (onFileSelect) {
      onFileSelect(filename); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á icon ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
  const getFileIcon = (filename: string) => {
    const extension = filename.split(".").pop()?.toLowerCase();
    switch (extension) {
      case "js":
      case "jsx":
        return "üü®"; // JavaScript
      case "ts":
      case "tsx":
        return "üî∑"; // TypeScript
      case "css":
        return "üé®"; // CSS
      case "html":
        return "üìÑ"; // HTML
      case "json":
        return "üì¶"; // JSON
      case "md":
        return "üìù"; // Markdown
      default:
        return "üìÑ"; // ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏° syntax highlighting
  const getSyntaxHighlightedContent = (content: string, filename: string) => {
    try {
      // ‡∏î‡∏∂‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
      const extension = filename.split(".").pop()?.toLowerCase();

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
      // ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ Prism.js ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£ highlight ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö
      switch (extension) {
        case "js":
        case "jsx":
          // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå JavaScript ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
          return content
            .replace(/(\/\/.*)/g, '<span style="color: #6a9955;">$1</span>') // ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            .replace(
              /(const|let|var|function|return|if|else|for|while)/g,
              '<span style="color: #569cd6;">$1</span>'
            ); // ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç

        case "ts":
        case "tsx":
          // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå TypeScript
          return content
            .replace(/(\/\/.*)/g, '<span style="color: #6a9955;">$1</span>') // ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            .replace(
              /(const|let|var|function|return|if|else|interface|type|extends)/g,
              '<span style="color: #569cd6;">$1</span>'
            ); // ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç

        case "md":
          // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå Markdown
          return content
            .replace(
              /^(#{1,6} .*)/gm,
              '<span style="color: #569cd6;">$1</span>'
            ) // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
            .replace(
              /(\*.+?\*)/g,
              '<span style="color: #ce9178;"><i>$1</i></span>'
            ); // ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏µ‡∏¢‡∏á

        case "json":
          // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå JSON
          return content.replace(
            /"([^"]+)":/g,
            '<span style="color: #9cdcfe;">"$1":</span>'
          ); // ‡∏Ñ‡∏µ‡∏¢‡πå

        case "txt":
          // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
          return content;

        default:
          // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ
          return content;
      }
    } catch (error) {
      console.error("Error highlighting syntax:", error);
      return content;
    }
  };

  // ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á UI ‡∏ó‡∏µ‡πà‡∏à‡∏∞ render
  return (
    <div
      className={`w-full bg-gray-800 flex flex-col rounded-md overflow-hidden shadow-lg ${className}`}
      style={{ height }}>
      {/* ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á VS Code (‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô) */}
      <div className="bg-gray-700 px-4 py-2 flex items-center justify-between border-b border-gray-600">
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 bg-red-500 rounded-full"></div>
          <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
          <div className="w-3 h-3 bg-green-500 rounded-full"></div>
        </div>
        <div className="text-gray-300 text-sm">{editorTitle}</div>
      </div>

      <div className="flex h-full">
        {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå Explorer ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ */}
        <div className="w-40 bg-gray-900 border-r border-gray-600 p-2">
          <div className="text-gray-300 text-sm font-semibold mb-2 flex items-center">
            <FolderOpen size={16} className="mr-2" />
            EXPLORER
          </div>

          {/* ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå */}
          <div className="space-y-1">
            {fileTree.map((item, index) => {
              // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
              if (item.type === "folder") {
                return (
                  <div key={`folder-${index}`}>
                    <div
                      className="flex items-center cursor-pointer hover:bg-gray-700 p-1 rounded text-gray-300"
                      style={{ paddingLeft: `${(item.level || 0) * 12 + 4}px` }}
                      onClick={() => toggleFolder(item.name)}>
                      {expandedFolders[item.name] ? (
                        <ChevronDown size={14} /> // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏•‡∏á‡∏ñ‡πâ‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                      ) : (
                        <ChevronRight size={14} /> // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏Ç‡∏ß‡∏≤‡∏ñ‡πâ‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                      )}
                      <FolderOpen size={14} className="mx-1" />
                      <span className="text-sm">{item.name}</span>
                    </div>
                  </div>
                );
              }
              // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå
              else {
                // ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏°‡πà
                const shouldShow = !item.parent || expandedFolders[item.parent];

                if (!shouldShow) return null;

                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏°‡πà‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≠‡∏ô)
                const parentItem = fileTree.find(
                  (f) => f.name === item.parent && f.type === "folder"
                );
                if (
                  parentItem &&
                  parentItem.parent &&
                  !expandedFolders[parentItem.parent]
                ) {
                  return null;
                }

                return (
                  <div
                    key={`file-${index}`}
                    className={`flex items-center cursor-pointer hover:bg-gray-700 p-1 rounded ${
                      currentFile === item.name
                        ? "bg-blue-800" // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                        : "text-gray-300"
                    }`}
                    style={{ paddingLeft: `${(item.level || 0) * 12 + 20}px` }}
                    onClick={() => handleFileClick(item.name)}>
                    <span className="mr-2 text-xs">
                      {getFileIcon(item.name)}
                    </span>
                    <span className="text-sm">{item.name}</span>
                  </div>
                );
              }
            })}
          </div>
        </div>

        {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡πâ‡∏î Editor ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ */}
        <div className="flex-1 bg-gray-800 overflow-hidden flex flex-col">
          {/* ‡πÅ‡∏ñ‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà (Tab Bar) */}
          <div className="bg-gray-700 border-b border-gray-600 flex">
            {currentFile && (
              <div className="bg-gray-800 px-4 py-2 border-r border-gray-600 flex items-center">
                <span className="mr-2 text-xs">{getFileIcon(currentFile)}</span>
                <span className="text-gray-300 text-sm">{currentFile}</span>
              </div>
            )}
          </div>

          {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå */}
          <div className="p-4 font-mono text-sm text-gray-300 overflow-y-auto flex-1">
            {currentFile && fileContents[currentFile] ? (
              <pre
                className="whitespace-pre-wrap leading-relaxed"
                dangerouslySetInnerHTML={{
                  __html: getSyntaxHighlightedContent(
                    fileContents[currentFile],
                    currentFile
                  ),
                }}
              />
            ) : (
              <div className="text-gray-500 italic">
                {
                  currentFile
                    ? "No content available for this file" /* ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå */
                    : "Select a file from the explorer" /* ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå */
                }
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default VSCodeMockup; // ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å component ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ
